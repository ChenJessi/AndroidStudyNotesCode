
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id 'com.google.protobuf'
    id 'AndResGuard'
//    id 'kotlin-parcelize'
}



// 定义变量
def app_android = /*this.*/getRootProject().ext.app_android;
// 定义变量
def app_implementation = rootProject.ext.app_implementation;

// 定义变量
def url = this.getRootProject().ext.url;

andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
//    fixedResName = "arg"
    // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
    mergeDuplicatedRes = true
    whiteList = [
            // for your icon
            "R.drawable.ic_launcher",
            "R.drawable.ic_launcher_round",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.19'
        //path = "/usr/local/bin/7za"
    }

    /**
     * 可选： 如果不设置则会默认覆盖assemble输出的apk
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * 可选: 指定v1签名时生成jar文件的摘要算法
     * 默认值为“SHA-1”
     **/
    // digestalg = "SHA-256"
}














protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.11.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}



android {
    compileSdkVersion app_android.compileSdkVersion
    buildToolsVersion app_android.buildToolsVersion
//    compileOptions.encoding = "GBK"
    defaultConfig {
        applicationId app_android.applicationId
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName
        testInstrumentationRunner app_android.testInstrumentationRunner

        // 只保留简体中文
        resConfigs app_android.resConfigs
//        ndk{
//            abiFilters  'armeabi-v7a'
//        }
        externalNativeBuild {
            cmake {
                cppFlags ""
                abiFilters  'armeabi-v7a'
            }
        }

        // 这个方法接收三个非空的参数：第一个 确定值的类型
        // 为什么需要定义这个？ 因为 src 代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        //  注意：不能在 android 根节点，只能在 defaultConfig 或者 buildTypes 的节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))


        javaCompileOptions{
            annotationProcessorOptions{
                arguments = [moduleName: project.name, packageNameForAPT: packageNameForAPT]
            }
        }
    }
//    tasks.withType(JavaCompile) {//解决编码错误: 编码UTF-8的不可映射字
//        options.encoding = "UTF-8"
//    }
    buildFeatures{
        dataBinding = true
    }

    buildTypes {
        debug{
            // 增加服务器URL地址---是在测试环境下
            buildConfigField("String", "SERVER_URL", "\"${url.debug}\"")
        }
        release {
            // 增加服务器URL地址---是在正式环境下
            buildConfigField("String", "SERVER_URL", "\"${url.release}\"")


//            signingConfig signingConfigs.config
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    signingConfigs {
//        config {
//            keyAlias 'jessi'
//            keyPassword '123456'
//            storeFile file('')
//            storePassword '123456'
//        }
//    }


    //    flavorDimensions "default"
//    productFlavors{
//        arm32{
//            dimension "default"
//            ndk{
//                abiFilters "armeabi-v7a"
//            }
//        }
//        arm64{
//            dimension "default"
//            ndk{
//                abiFilters "arm64-v8a"
//            }
//        }
//    }
//
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a'
//      exclude 'armeabi'
            universalApk false  //是否打包一个包含所有so的apk
        }
    }



    sourceSets {
        main {
            if (!isRelease) {
                // 如果是组件化模式，需要单独运行时
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java.srcDirs = ['src/main/java']
                res.srcDirs = ['src/main/res']
                resources.srcDirs = ['src/main/resources']
                aidl.srcDirs = ['src/main/aidl']
                assets.srcDirs = ['src/main/assets']
            } else {
                // 集成化模式，整个项目打包
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"


    /**
     * JavaPoet
     */
    //  arouter 专用 注解模块
//    implementation project(':arouter_annotation_java')
    // arouter 专用 注解处理器
    // 注意  kapt 环境下  WARNING 级别以下的日志不打印
//    kapt project(':arouter_compiler_java')
//    implementation project(':arouter_api_java')

    /**
     * kotlinPoet
     */
//    //  arouter 专用 注解模块
//    implementation project(':arouter_annotation')
//    // arouter 专用 注解处理器
//    // 注意  kapt 环境下  WARNING 级别以下的日志不打印
//    kapt project(':arouter_compiler')


    // 第三方
    app_implementation.each{
        k, v -> implementation v
    }


    implementation project(path: ':crash')
    implementation project(path: ':common')
    implementation project(path: ':order')
}